#!/usr/bin/env python
"""Creates pretty comments for source code

comment text is taken in from stdin and printed to stdout.
"""
###############################################################################
# This comment was created using the following program                        #
#                                                                             #
# Comments are created to be uniform in length with lines padded by an        #
# appropriate number of spaces and terminated by a character sequence. The    #
# comment text can, optionally, be centered in the middle of each line with   #
# spaces used to pad the text on either side                                  #
###############################################################################

###############################################################################
#                                   IMPORTS                                   #
###############################################################################
import argparse
import sys
from collections import namedtuple

#just importing improves stdin line editting with raw_input considerably
import readline
###############################################################################
#                                    DATA                                     #
###############################################################################
CommentStyle = namedtuple(
		'CommentStyle',
		('topLeft topFill topRight '
		 'midLeft midFill midRight '
		 'botLeft botFill botRight ')
	)

STYLE_MAP={
	'slashSplat':CommentStyle(
			'/*','*','**',
			'* ',' ',' *',
			'**','*','*/',
		),
	'hash':CommentStyle(
			 '##','#','##',
			 '# ',' ',' #',
			 '##','#','##',
		),
	'dash':CommentStyle(
			'/*','-','*/',
			'/*','-','*/',
			'/*','-','*/',
		)
}

DEFAULT_COLUMN_WIDTH=79
DEFAULT_TAB_WIDTH=8
###############################################################################
#                                    CODE                                     #
###############################################################################
def wordSpaceSplit(s):
	"""Split string into a list of whitespace and non-whitespace strings
	"""
	tok = ''
	inSpace = False
	split = []
	for c in s:
		if c.isspace():
			if inSpace:
				tok += c
			else:
				if len(tok):
					split.append(tok)
				tok = c
				inSpace = True
		else:
			if not inSpace:
				tok += c
			else:
				if len(tok):
					split.append(tok)
				tok = c
				inSpace = False

	if len(tok):
		split.append(tok)

	return split


def makeLinesToWidth(text,cWidth):
	"""Splits text into string of max width cWidth

	The split occurs along word boundaries unless a single word is larger
	than the allowed width.

	Sections of whitespace may be removed if they occur at a character
	width boundary. Trailing whitespace is ignored altogether.
	"""
	if cWidth <= 0:
		raise ValueError('line width must be at least 1')

	if text == '':
		return ['']

	lines = []
	toks = wordSpaceSplit(text.rstrip())
	line = ''

	for i in xrange(len(toks)):

		if ( len(line)+len(toks[i]) ) > cWidth:

			if len(line):
				lines.append(line.rstrip())
				line = ''
				if toks[i].isspace():
					continue

		if len(toks[i]) > cWidth:
			for n in xrange(0,len(toks[i]),cWidth):
				p = toks[i][n:n+cWidth]
				lines.append(p)
		else:
			line += toks[i]

	if len(line):
		lines.append(line)

	return lines

def headerCommentTerm(left,right,fill,width):
	"""Create a header comment entry or exit section
	"""
	if len(fill) == 0:
		return ''
	if len(fill) > 1:
		raise ValueError('Fill must be a single char!')

	fillLen = width-len(left)-len(right)

	if fillLen < 0:
		raise ValueError('Line not long enough!')

	return left+fill*fillLen+right+'\n'


def commentLines(left,right,fill,text,width,centered=False):
	"""Create header comment lines from the given input text

	left and right refer to strings which are placed at the start and
	end of every line.
	"""

	lineRoom = width - len(left) - len(right)

	if lineRoom <= 0:
		raise ValueError('No room in lines for comment!\n')

	output = ''

	for line in text.split('\n')[:-1]:
		if not centered:
			splits = makeLinesToWidth(line,lineRoom)
		else:
			splits = makeLinesToWidth(line.lstrip(),lineRoom)

		for s in splits:
			spaces = lineRoom-len(s)
			if not centered:
				output += left+s+fill*spaces+right+'\n'
			else:
				spaceLeft = spaces/2
				spaceRight = spaces-spaceLeft
				output += (
						left+fill*spaceLeft+
						s
						+spaceRight*fill+right+
						'\n'
					)

	return output

def readInput():
	"""Read input string from stdin
	"""
	if not sys.stdin.isatty():
		return sys.stdin.read()


	text = ''
	while True:
		try:
			text += raw_input('> ')+'\n'
		except EOFError:
			break

	sys.stdout.write('\n')

	return text



def parseArgs():
	"""Interpret command line arguments

	returns an object which shows the options selected by the user
	"""
	parser = argparse.ArgumentParser(
			description=__doc__,
			formatter_class=argparse.RawDescriptionHelpFormatter
		)

	styleGroup = parser.add_mutually_exclusive_group()
	styleGroup.add_argument(
			'--slashSplat','-s',action='store_const',
			const=STYLE_MAP['slashSplat'],dest='style',
			help=(
				'Sets comment style to C or java style'
				' block comments (this is the default)'
			)
		)
	styleGroup.add_argument(
			'--hash','-a',action='store_const',
			const=STYLE_MAP['hash'],dest='style',
			help=(
				'Sets comment style to python or shellscript'
				' style comments'
			)
		)
	styleGroup.add_argument(
			'--dash','-d',action='store_const',
			const=STYLE_MAP['dash'],dest='style',
			help=(
				'Sets comment style to C style /* comments '
				'all filled in by dashes'
			)
		)

	justifyGroup = parser.add_mutually_exclusive_group()
	justifyGroup.add_argument(
			'--centre','-c',action='store_true',dest='centered',
			help=(
				'Makes comments centered. This is the default.'
			)
		)
	justifyGroup.add_argument(
			'--left','-l',action='store_false',dest='centered',
			help=(
				'Makes comments left justified'
			)
		)

	parser.add_argument(
			'--width',action='store',type=int,dest='width',
			default=DEFAULT_COLUMN_WIDTH,
			help=(
				'Sets the line width used to make the '
				'comments. The default is %(default)d'
				' characters'
			)

		)

	parser.add_argument(
			'--tabWidth',action='store',type=int,dest='tabWidth',
			default=DEFAULT_TAB_WIDTH,
			help=(
				'Sets the number of spaces used to replace'
				' tabs (tabs are always replaced by spaces).'
				' default width is %(default)d.'
			)
		)

	parser.set_defaults(style=STYLE_MAP['slashSplat'],centered=True)

	args = parser.parse_args()

	if args.width <= 0:
		parser.error('width must be greater than zero')
		exit(-1)
	elif args.tabWidth < 0:
		parser.error('tab width must be non-negative')
		exit(-1)

	return args

if __name__ == '__main__':
	"""Program entry point
	"""
	args = parseArgs()
	text = readInput()

	text = text.expandtabs(args.tabWidth)

	try:
		top = headerCommentTerm(
				args.style.topLeft,args.style.topRight,
				args.style.topFill,args.width
			)
		mid = commentLines(
				args.style.midLeft,args.style.midRight,
				args.style.midFill,
				text,args.width,args.centered
			)
		bot = headerCommentTerm(
				args.style.botLeft,args.style.botRight,
				args.style.botFill,args.width
			)

		sys.stdout.write(top+mid+bot)

	except Exception as e:
		sys.stderr.write('Error: %s\n'%str(e))
		exit(-1)
